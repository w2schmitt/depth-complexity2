/* 
 * File:   bps_offline.cpp
 * Author: sombra
 *
 * Created on 6 de Agosto de 2012, 16:03
 */

#include <cstdlib>
#include "MeshTree.h"
#include "flags.h"
#include <GL/glew.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

std::string getExtension(const std::string& filename);

/*
 * 
 */
int main(int argc, char** argv) {
  cmd_usage("Program that divides a model, based in the lines generated by depthcomplexity3d_offline");
  
  const char *filename = cmd_option("-f", "", "Model in the OBJ or OFF format");
  const bool normalDC = cmd_option("-r", false, "switch for DCNormal or DCRandom(false, default)");
  const bool graphComp = cmd_option("-g", false, "switch for complete graph");
  const int minDepht = cmd_option("-md", 2, "minimal complexity for a incomplete graph");  
  const int maxHeight = cmd_option("-mh", 4, "maximal height of the complete graph");
  const char *graphOut = cmd_option("-o", "", "output file for the graph");
  
  try{
    if(strcmp(filename, "")==0)
      throw "No model file specified";
    
    //carrega modelo a ser dividido
    tic();
    std::ifstream file(filename);
    std::string ext = getExtension(filename);
    TriMesh mesh;
    if (ext == "off" || ext == "OFF")
      mesh = loadOFFMesh(file);
    else if (ext == "obj" || ext == "OBJ")
      mesh = loadOBJMesh(file);
    else
      throw "Unknown file type for model!";
    file.close();
    toc("Loading Mesh");
    
    MeshTree *treeRoot = new MeshTree(normalDC);
    
    if(graphComp){
      treeRoot->MakeCompleteTree(mesh, maxHeight);
    }else{
      treeRoot->MakeTree(mesh, minDepht);
    }
    
    //write part_a of the model
    if (strcmp(graphOut, "")!=0) {
      std::ofstream fileRays(graphOut);
      treeRoot->WriteTreeGraph(fileRays);
      fileRays.close();
    }
        
  } catch (const char* msg)  {
    std::cerr << "Failed: " << msg << std::endl;
    return 1;
  } catch (std::string msg) {
    std::cerr << "Failed: " << msg << std::endl;
    return 1;
  }
  
  return 0;
}

std::string getExtension(const std::string& filename)
{
    std::string::size_type dotpos = filename.rfind(".");
    if (dotpos != std::string::npos)
        return filename.substr(dotpos+1);
    return "";
}